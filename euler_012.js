// Problem 12
// ==========
// 
// The sequence of triangle numbers is generated by adding the natural
// numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 =
// 28. The first ten terms would be:
// 
//                  1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
// 
// Let us list the factors of the first seven triangle numbers:
// 
//    1: 1
//    3: 1,3
//    6: 1,2,3,6
//   10: 1,2,5,10
//   15: 1,3,5,15
//   21: 1,3,7,21
//   28: 1,2,4,7,14,28
// 
// We can see that 28 is the first triangle number to have over five
// divisors.
// 
// What is the value of the first triangle number to have over five hundred
// divisors?

var isPrime = function() {
	var memo = [false, false, true];

	return function(n) {
		if(n in memo) {
			return memo[n];
		}

		if(n % 2 == 0) {
			return (memo[n] = false);
		}
	
		var upper = Math.sqrt(n);
		for(var i = 3; i <= upper; i += 2) {
			if(n % i == 0 && isPrime(i)) {
				return (memo[n] = false);
			}
		}
		return (memo[n] = true);
	};
}();

var primeFactors = function() {
	var memo = [];

	return function(n) {
		var output = [];
		
		if(n in memo) {
			return memo[n];
		}
		if(isPrime(n)) {
			return (memo[n] = [n]);
		} else if(n % 2 == 0) {
			return (memo[n] = [2].concat(primeFactors(n/2)));
		} else {
			var upper = Math.sqrt(n);
			for(var i = 3; i <= upper; i += 2) {
				if(n % i == 0 && isPrime(i)) {
					return (memo[n] = [i].concat(primeFactors(n/i)));
				}
			}
		}
	}
}();

var triangle = 1;
var divisors = 1;
for(var i = 2; divisors <= 500; i++) {
	triangle += i;

	var factors = primeFactors(triangle)
		.reduce((acc, current) => {
			acc[current] = current in acc ? acc[current] + 1 : 1;
			return acc;
		}, {});

	divisors = 1;
	for(var key in factors) {
		divisors *= factors[key] + 1;
	}
}

return triangle;
